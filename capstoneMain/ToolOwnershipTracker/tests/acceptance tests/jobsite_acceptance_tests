from django.test import TestCase, Client
import capstoneMain.ToolOwnershipTracker.models

class checkTitleTests(TestCase):
    def setup(self):
        tempJobsite = Jobsite(id = "1", owner = tempUser, title = "test", assigned = NULL, toolbox = tempToolbox)
        tempJobsite.save()
        tempTitle="test"

    def testPositiveWithTitle(self):
        assertIsTrue(checkTitle(self,tempTitle))

    def testNegativeWithoutTitle(self):
        assertIsFalse(checkTitle(self,tempTitle))
        self.assertRaises(Exception):
            checkTitle(self, "")

class assignOwnerTests(TestCase):
    def setup(self):
        tempJobsite = Jobsite(id = "1", owner = tempUser, title = "test", assigned = NULL, toolbox = tempToolbox)
        tempJobsite.save()
        tempUser = User(firstName = "test", lastName = "test", email = "test", password = "test", address = "test", phone = "test")
        tempUser.save()

    def testPositiveWithUser(self):
        assertIsTrue(assignOwner(self,tempUser))

    def testNegativeWithNoUser(self):
        assertIsFalse(assignOwner(self, "fakeuser")
        self.assertRaises(Exception):
            assignOwner(self, "fakeuser")

class addUserTests(TestCase):
     def setup(self):
        tempJobsite = Jobsite(id = "1", owner = tempUser, title = "test", assigned = NULL, toolbox = tempToolbox)
        tempJobsite.save()
        tempUser = User(firstName = "test", lastName = "test", email = "test", password = "test", address = "test", phone = "test")
        tempUser.save()

     def testPositiveWithUser(self):
        assertIsTrue(addUser(self,tempUser))

     def testNegativeWithoutUser(self):
        assertIsFalse(addUser(self,"fakeuser"))
        self.assertRaises(Exception):
            addUser(self,"fakeuser")

     #TODO Jobsite does not currently check if the user already exists may cause duplicates

class changeTitleTests(TestCase):
      def setup(self):
        tempJobsite = Jobsite(id = "1", owner = tempUser, title = "test", assigned = NULL, toolbox = tempToolbox)
        tempJobsite.save()

      def TestPositive(self):
        assertIsTrue(changeTitle(tempJobsite,"New Title")
        assertEquals(tempJobsite.title,"New Title")

      def TestNegative(self):
        assertIsFalse(changeTitle(tempJobsite,"")
        assertEquals(tempJobsite.title,"test")
        assertRaises(Exception):
            changeTitle(tempJobsite,"")

class removeJobsiteTest(TestCase):
     def setup(self):
        tempJobsite = Jobsite(id = "1", owner = tempUser, title = "test", assigned = NULL, toolbox = tempToolbox)
        tempJobsite.save()
        tempJobsiteWithUser = Jobsite(id = "1", owner = tempUser, title = "test", assigned = [tempUser], toolbox = tempToolbox)
        tempJobsiteWithUser.save()

    def testPositiveWithNoUsers(self):
        assertIsTrue(removeJobsite(tempJobsite))
        assertRaises(RuntimeError):
            tempJobsite.id = 0

    def testNegativeWithUsers(self):
        assertIsFalse(removeJobsite(tempJobsiteWithUser))
        assertRaises(Exception):
            removeJobsite(tempJobsiteWithUser)
        assertEquals(tempJobsiteWithUser.id, 1)

class removeUserTests(TestCase):
    def setup(self):
        tempUser = User(firstName = "test", lastName = "test", email = "test", password = "test", address = "test", phone = "test")
        tempUser.save()
        tempJobsite = Jobsite(id = "1", owner = tempUser, title = "test", assigned = [tempUser], toolbox = tempToolbox)
        tempJobsite.save()
        tempJobsiteWithoutUsers = Jobsite(id = "1", owner = tempUser, title = "test", assigned = NULL, toolbox = tempToolbox)
        tempJobsiteWithoutUsers.save()

    def testPositive(self):
        assertIsTrue(removeUser(tempJobsite,tempUser)
        assertNotIn(tempUser,tempJobsite.assigned)

    def testNegativeWithFalseUser(self):
        assertIsFalse(removeUser(tempJobsite, "fakeuser")
        assertRaises(Exception):
            removeUser(tempJobsite,"fakeuser")

    def testNegativeWithNoUser(self):
        assertIsFalse(removeUser(tempJobsiteWithoutUsers, tempUser)
        assertRaises(Exception):
            removeUser(tempJobsiteWithoutUsers,tempUser)


